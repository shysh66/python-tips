I'd like to address the sometimes confusing difference between 'is' and '==' equality.

tl;dr - 'is' used for object equality and '==' is for value equality.
And now for the longer version.

I'll start with a simple example of an integer - 
>>> a = 123456
>>> b = 123456
>>> a==b, a is b
# (True, False)

The reason that we got False on 'a is b' is because 'a' and 'b' are 2 different objects.


If the objects are list we can check interesting theories:
>>> l1 = [1, 2, 3, 4]
>>> l2 = [1, 2, 3, 4]
>>> l1==l2, l1 is l2
# (True, False)

First it's the same as the integer. Now let's try to create a third list from the first list - 
>>> l3 = list(l1)
>>> l3 # [1, 2, 3, 4] 

As you can see it has the same values as the original list.However, it's not the SAME object
>>> l1==l3, l1 is l3
# (True, False)

Second let's try to create another pointer to the first list.
>>> l4 = l1
>>> l4 # [1, 2, 3, 4]
>>> l1==l4, l1 is l4
# (True, True)
Now it is the SAME object since the 2 variable point to the same object.
